#BlueJ class context
comment0.params=
comment0.target=TrieST()
comment0.text=\r\n\ Initializes\ an\ empty\ string\ symbol\ table.\r\n
comment1.params=key
comment1.target=java.lang.Object\ get(java.lang.String)
comment1.text=\r\n\ Returns\ the\ value\ associated\ with\ the\ given\ key.\r\n\ @param\ key\ the\ key\r\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\r\n\ \ \ \ \ and\ {@code\ null}\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment10.params=x\ prefix\ results
comment10.target=void\ collect(TrieST.Node,\ java.lang.StringBuilder,\ Queue)
comment11.params=pattern
comment11.target=java.lang.Iterable\ keysThatMatch(java.lang.String)
comment11.text=\r\n\ Returns\ all\ of\ the\ keys\ in\ the\ symbol\ table\ that\ match\ {@code\ pattern},\r\n\ where\ .\ symbol\ is\ treated\ as\ a\ wildcard\ character.\r\n\ @param\ pattern\ the\ pattern\r\n\ @return\ all\ of\ the\ keys\ in\ the\ symbol\ table\ that\ match\ {@code\ pattern},\r\n\ \ \ \ \ as\ an\ iterable,\ where\ .\ is\ treated\ as\ a\ wildcard\ character.\r\n
comment12.params=x\ prefix\ pattern\ results
comment12.target=void\ collect(TrieST.Node,\ java.lang.StringBuilder,\ java.lang.String,\ Queue)
comment13.params=query
comment13.target=java.lang.String\ longestPrefixOf(java.lang.String)
comment13.text=\r\n\ Returns\ the\ string\ in\ the\ symbol\ table\ that\ is\ the\ longest\ prefix\ of\ {@code\ query},\r\n\ or\ {@code\ null},\ if\ no\ such\ string.\r\n\ @param\ query\ the\ query\ string\r\n\ @return\ the\ string\ in\ the\ symbol\ table\ that\ is\ the\ longest\ prefix\ of\ {@code\ query},\r\n\ \ \ \ \ or\ {@code\ null}\ if\ no\ such\ string\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ query}\ is\ {@code\ null}\r\n
comment14.params=x\ query\ d\ length
comment14.target=int\ longestPrefixOf(TrieST.Node,\ java.lang.String,\ int,\ int)
comment15.params=key
comment15.target=void\ delete(java.lang.String)
comment15.text=\r\n\ Removes\ the\ key\ from\ the\ set\ if\ the\ key\ is\ present.\r\n\ @param\ key\ the\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment16.params=x\ key\ d
comment16.target=TrieST.Node\ delete(TrieST.Node,\ java.lang.String,\ int)
comment17.params=args
comment17.target=void\ main(java.lang.String[])
comment17.text=\r\n\ Unit\ tests\ the\ {@code\ TrieST}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=key
comment2.target=boolean\ contains(java.lang.String)
comment2.text=\r\n\ Does\ this\ symbol\ table\ contain\ the\ given\ key?\r\n\ @param\ key\ the\ key\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ contains\ {@code\ key}\ and\r\n\ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment3.params=x\ key\ d
comment3.target=TrieST.Node\ get(TrieST.Node,\ java.lang.String,\ int)
comment4.params=key\ val
comment4.target=void\ put(java.lang.String,\ java.lang.Object)
comment4.text=\r\n\ Inserts\ the\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ value\r\n\ with\ the\ new\ value\ if\ the\ key\ is\ already\ in\ the\ symbol\ table.\r\n\ If\ the\ value\ is\ {@code\ null},\ this\ effectively\ deletes\ the\ key\ from\ the\ symbol\ table.\r\n\ @param\ key\ the\ key\r\n\ @param\ val\ the\ value\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment5.params=x\ key\ val\ d
comment5.target=TrieST.Node\ put(TrieST.Node,\ java.lang.String,\ java.lang.Object,\ int)
comment6.params=
comment6.target=int\ size()
comment6.text=\r\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\r\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\r\n
comment7.params=
comment7.target=boolean\ isEmpty()
comment7.text=\r\n\ Is\ this\ symbol\ table\ empty?\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty\ and\ {@code\ false}\ otherwise\r\n
comment8.params=
comment8.target=java.lang.Iterable\ keys()
comment8.text=\r\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}.\r\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ {@code\ st},\r\n\ use\ the\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ st.keys())}.\r\n\ @return\ all\ keys\ in\ the\ symbol\ table\ as\ an\ {@code\ Iterable}\r\n
comment9.params=prefix
comment9.target=java.lang.Iterable\ keysWithPrefix(java.lang.String)
comment9.text=\r\n\ Returns\ all\ of\ the\ keys\ in\ the\ set\ that\ start\ with\ {@code\ prefix}.\r\n\ @param\ prefix\ the\ prefix\r\n\ @return\ all\ of\ the\ keys\ in\ the\ set\ that\ start\ with\ {@code\ prefix},\r\n\ \ \ \ \ as\ an\ iterable\r\n
numComments=18
