#BlueJ class context
comment0.params=
comment0.target=TrieSET()
comment0.text=\r\n\ Initializes\ an\ empty\ set\ of\ strings.\r\n
comment1.params=key
comment1.target=boolean\ contains(java.lang.String)
comment1.text=\r\n\ Does\ the\ set\ contain\ the\ given\ key?\r\n\ @param\ key\ the\ key\r\n\ @return\ {@code\ true}\ if\ the\ set\ contains\ {@code\ key}\ and\r\n\ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment10.params=pattern
comment10.target=java.lang.Iterable\ keysThatMatch(java.lang.String)
comment10.text=\r\n\ Returns\ all\ of\ the\ keys\ in\ the\ set\ that\ match\ {@code\ pattern},\r\n\ where\ .\ symbol\ is\ treated\ as\ a\ wildcard\ character.\r\n\ @param\ pattern\ the\ pattern\r\n\ @return\ all\ of\ the\ keys\ in\ the\ set\ that\ match\ {@code\ pattern},\r\n\ \ \ \ \ as\ an\ iterable,\ where\ .\ is\ treated\ as\ a\ wildcard\ character.\r\n
comment11.params=x\ prefix\ pattern\ results
comment11.target=void\ collect(TrieSET.Node,\ java.lang.StringBuilder,\ java.lang.String,\ Queue)
comment12.params=query
comment12.target=java.lang.String\ longestPrefixOf(java.lang.String)
comment12.text=\r\n\ Returns\ the\ string\ in\ the\ set\ that\ is\ the\ longest\ prefix\ of\ {@code\ query},\r\n\ or\ {@code\ null},\ if\ no\ such\ string.\r\n\ @param\ query\ the\ query\ string\r\n\ @return\ the\ string\ in\ the\ set\ that\ is\ the\ longest\ prefix\ of\ {@code\ query},\r\n\ \ \ \ \ or\ {@code\ null}\ if\ no\ such\ string\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ query}\ is\ {@code\ null}\r\n
comment13.params=x\ query\ d\ length
comment13.target=int\ longestPrefixOf(TrieSET.Node,\ java.lang.String,\ int,\ int)
comment14.params=key
comment14.target=void\ delete(java.lang.String)
comment14.text=\r\n\ Removes\ the\ key\ from\ the\ set\ if\ the\ key\ is\ present.\r\n\ @param\ key\ the\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment15.params=x\ key\ d
comment15.target=TrieSET.Node\ delete(TrieSET.Node,\ java.lang.String,\ int)
comment16.params=args
comment16.target=void\ main(java.lang.String[])
comment16.text=\r\n\ Unit\ tests\ the\ {@code\ TrieSET}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=x\ key\ d
comment2.target=TrieSET.Node\ get(TrieSET.Node,\ java.lang.String,\ int)
comment3.params=key
comment3.target=void\ add(java.lang.String)
comment3.text=\r\n\ Adds\ the\ key\ to\ the\ set\ if\ it\ is\ not\ already\ present.\r\n\ @param\ key\ the\ key\ to\ add\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment4.params=x\ key\ d
comment4.target=TrieSET.Node\ add(TrieSET.Node,\ java.lang.String,\ int)
comment5.params=
comment5.target=int\ size()
comment5.text=\r\n\ Returns\ the\ number\ of\ strings\ in\ the\ set.\r\n\ @return\ the\ number\ of\ strings\ in\ the\ set\r\n
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\r\n\ Is\ the\ set\ empty?\r\n\ @return\ {@code\ true}\ if\ the\ set\ is\ empty,\ and\ {@code\ false}\ otherwise\r\n
comment7.params=
comment7.target=java.util.Iterator\ iterator()
comment7.text=\r\n\ Returns\ all\ of\ the\ keys\ in\ the\ set,\ as\ an\ iterator.\r\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ a\ set\ named\ {@code\ set},\ use\ the\r\n\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ set)}.\r\n\ @return\ an\ iterator\ to\ all\ of\ the\ keys\ in\ the\ set\r\n
comment8.params=prefix
comment8.target=java.lang.Iterable\ keysWithPrefix(java.lang.String)
comment8.text=\r\n\ Returns\ all\ of\ the\ keys\ in\ the\ set\ that\ start\ with\ {@code\ prefix}.\r\n\ @param\ prefix\ the\ prefix\r\n\ @return\ all\ of\ the\ keys\ in\ the\ set\ that\ start\ with\ {@code\ prefix},\r\n\ \ \ \ \ as\ an\ iterable\r\n
comment9.params=x\ prefix\ results
comment9.target=void\ collect(TrieSET.Node,\ java.lang.StringBuilder,\ Queue)
numComments=17
